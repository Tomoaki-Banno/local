<?php

// 抽象クラス（abstract）。インスタンスを生成できない。

abstract class Base_AjaxBase
{

    //************************************************
    // 抽象メソッド
    //************************************************
    // 子クラスで必ず実装しなければならない。

    abstract function _execute(&$form);

    //************************************************
    // メイン
    //************************************************
    function execute(&$form)
    {
        //------------------------------------------------------
        // Ajaxトークンの確認
        //------------------------------------------------------
        //  Ajax の CSRF対策用のトークンについて
        //  　※ CSRF対策としては本来、登録や変更の処理を行う場合のみトークン処理をすればいい。
        //       しかしGenではすべてのAjaxリクエストでこの処理を行なっている。
        //    ※ ワンタイムトークンではなく、ログイン時に発行されたトークンをログアウトまでずっと使用する。
        //  　　　一方、POST/GET用のトークン（gen_page_request_id）の場合、画面ごとに発行され、登録処理を行なった時点でセッション
        //  　　　から消去される。（ワンタイムトークン）
        //  　　　しかしAjax用トークンは、同じページからの複数のリクエストが並行することがあるため、そのようにすることができない。
        //  　　　また、ブラウザの複数タブを使用する可能性があるので、ページ表示のたびに古いトークンを消去するということもできない。
        //  　　　それで上記のような方式をとっている。
        //  　　　ワンタイムトークンに比べるとセキュリティレベルは低いが、代替となる方法が見つかっていないためやむを得ない。
        //  　　　13i以前のように未対策の状態よりはずっとまし。
        //  　※ 簡易なCSRF対策として、HTTPヘッダのX-requested-with が XMLHttpRequest になっているかをチェックするという方法がある。
        //  　　　しかし、古いブラウザや古いFlash、一部のブラウザプラグインでは上記のヘッダが偽装できてしまうので、完全に安全とはいえない。
        //  　※ ログイン時に発行されたトークンがログアウトまで使用されるという意味ではログインセッションに似ているが、
        //  　　　違いは、セッションがCookieで管理される（そのためCSRFに無防備）のに対し、Ajaxトークンは hidden埋め込みだという点。
        //  　　　なのでCSRF対策として有効。
        //  
        //  【仕組み】
        //  　・ログイン時にトークン発行。（Login.class.php）
        //  　・そのトークンは common_header.tpl と editmodal.tpl に hiddenタグとして埋め込まれる。
        //  　・JS の gen.ajax.connect(), gen.fileUpload.doUpload() は、Ajaxリクエストを送る際、トークンを読み取ってパラメータに付加する。
        //  　・サーバー側（AjaxBase）ではトークンを確認。
        if (!isset($form['gen_ajax_token']) || $_SESSION['gen_ajax_token'] != $form['gen_ajax_token']) {
            $form['response_noEscape'] = "tokenError";
            return 'simple.tpl';
        }
        
        //------------------------------------------------------
        // リクエストがXHR(XMLHttpRequest)からのものであることをチェック
        //------------------------------------------------------
        //　XHRリクエストであることを確認することにより、Ajaxクラスを直接呼び出してレスポンスを画面に表示させるという方法でのXSSを防止する。
        //　またXHRは基本的にクロスドメイン間通信ができないので、XHRリクエストであることを確認すれば、外部からのリクエストでないと判断でき、
        //　XSSとCSRF両方への対策にもなっている。
        //  ちなみにこのヘッダはYUIやjQueryのAjaxコールの際に自動的に付与される。XHR以外での偽装はできない。
        if (!$_SESSION['gen_app'] && $_SERVER['HTTP_X_REQUESTED_WITH'] !== 'XMLHttpRequest') {
            $form['response_noEscape'] = "requestError";
            return 'simple.tpl';
        }	

        //------------------------------------------------------
        // 実行
        //------------------------------------------------------
        $obj = $this->_execute($form);

        //------------------------------------------------------
        // レスポンス
        //------------------------------------------------------
        if ($obj !== null) {
            $form['response_noEscape'] = json_encode($obj);
        }

        // JSON直接ブラウジングによるXSS回避のため、Content-typeを正しく設定する。
        header("Content-Type: application/json; charset=UTF-8");
        
        return 'simple.tpl';
    }
}
